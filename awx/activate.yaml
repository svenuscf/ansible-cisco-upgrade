---
# Playbook to activate image for patching IOS via AWX
#
# Defined variables in survey:
#
# target_version - firmware version to be upgraded to
# upgrade_filename - filename of the firmware 
# md5_checksum - MD5 checksum of the image file
# command_timeout - Set ansible command timeout
#
- name: Patch Cisco IOS and IOS-XE in AWX
  hosts: all
  gather_facts: false
  tasks:

# Task 1: Gather necessary facts
    - name: Gather facts from Cisco devices
      cisco.ios.ios_facts:
        gather_subset:
          - hardware
      register: facts

    - name: Display running version
      debug:
        msg: "Current version is {{ facts.ansible_facts.ansible_net_version }}"

    - name: Display target version captured from survey
      debug:
        msg: "Target version is {{ target_version }}"

    # Task 2: Check if the device requires upgrade by matching running version and upgrade version supplied by survey
    - name: Stop following tasks if the device does not need to upgrade
      fail:
        msg: "Device is already running the latest {{ target_version }} version. Upgrade procedure stops."
      when:
        - facts.ansible_facts.ansible_net_version == target_version

    # Assgin device_type variable. Later used for defining upgrade methods.
    - name: Assign device_type variable
      set_fact:
        device_type: "{{ ('router' if 'bootflash:' in facts.ansible_facts.ansible_net_image else 'switch') | trim }}"
      
    # The playbook supports IOS-XE upgrade in INSTALL mode or legacy device using boot system command
    # Check which mode is in use.
    - name: Run "show version" to check if the device is in INSTALL mode
      cisco.ios.ios_command:
        commands:
          - show version
      register: version_output
      when: device_type == 'switch'

    - name: Parse "show version" output for INSTALL mode
      set_fact:
        in_install_mode: "{{ 'INSTALL' in version_output.stdout[0] }}"
      when: device_type == 'switch'

    - name: Run "show run | inc boot system" to check if the device is in INSTALL mode
      cisco.ios.ios_command:
        commands:
          - show run | inc boot system
      register: version_output
      when: device_type == 'router'

    - name: Parse "show run | inc boot system" output for INSTALL mode
      set_fact:
        in_install_mode: "{{ 'packages.conf' in version_output.stdout[0] }}"
      when: device_type == 'router'

    - name: Display whether the device is in INSTALL mode
      debug:
        msg: "The device is in INSTALL mode: {{ in_install_mode }}"

    - name: Assign device_storage variable
      set_fact:
        device_storage: "{{ facts.ansible_facts.ansible_net_filesystems[0] }}"

    - name: Assign the device path and file for checking
      set_fact:
        device_file: "{{ device_storage }}{{ upgrade_filename }}"

    - block:
    # Task 3: Check if the file exists
        - name: Check if the file exists on the device
          cisco.ios.ios_command:
            commands: "dir {{ device_file }}"
          register: file_check
          ignore_errors: no  # Don't ignore errors here; use rescue to catch errors.

    # Task 4: Parse the file check result
        - name: Parse the file check result
          set_fact:
            file_exists: "{{ 'stdout' in file_check and 'No such file' not in file_check.stdout[0] }}"

      rescue:
        # Error handling: when file does not exist
        - name: Print error message
          debug:
            msg: "Error: File does not exist on host {{ inventory_hostname }}. Stopping upgrade procedure."

        # Stop all remaining tasks for this host
        - name: Fail the task and stop further tasks for this host if upgrade firmware does not exist
          fail:
            msg: "Stopping further tasks on host {{ inventory_hostname }} due to upgrade file not exist."

    # Task 5: Check md5 checksum on the device against the input from template survey
    - name: Ensure command_timeout is an integer
      set_fact:
        command_timeout: "{{ command_timeout | int }}"

    - name: Verify MD5 checksum of the uploaded file
      cli_command:
        command: "verify /md5 {{ device_file }}"
      register: checksum_output
      ignore_errors: yes
      changed_when: false
      vars:
        ansible_command_timeout: "{{ command_timeout }}"

    - name: Flatten the stdout lines to handle multi-line output
      set_fact:
        flat_output: "{{ checksum_output.stdout_lines | flatten }}"

    - name: Extract the checksum from the output
      set_fact:
        file_checksum: "{{ flat_output | select ('search', 'verify /md5') | first | regex_search('=\\s*(\\w+)', '\\1') }}" 

    - name: Convert the checksum from list to string (if necessary)
      set_fact:
        file_checksum: "{{ file_checksum[0] if file_checksum is iterable else file_checksum }}"

    - name: Log MD5 checksum status
      debug:
        msg: >
          {% if md5_checksum != file_checksum %}
            MD5 checksum for {{ upgrade_filename }} does not match! File might be corrupted.
          {% else %}
            MD5 checksum for {{ upgrade_filename }} matches. File is valid.
          {% endif %}

    # Stop all remaining tasks for this host
    - name: Fail the task and stop further tasks for this host
      fail:
        msg: "Stopping further tasks on host {{ inventory_hostname }} due to firmware is corrupted."
      when: md5_checksum != file_checksum

    # Activate image based on in_install_mode variable:
    # If true, use install command.
    # If false, config boot variable and reboot
    
    # Task 6a: Create EEM scripts to upgrade using the install command
    - block:
        - name: Run "show run | inc event.*UPGRADE" to check if the device has already been configured with a upgrade EEM script
          cisco.ios.ios_command:
            commands:
              - "show run | inc event.*UPGRADE"
          register: upgrade_output

        - name: Determine the if a UPGRADE script exists
          set_fact:
            eem_exist: >
              {% if 'UPGRADE' in upgrade_output.stdout[0] %}
                true
              {% else %}
                false
              {% endif %}

    # Task 7a: Configure the EEM scripts
        - name: Configure the EEM script by first removing the existing one 
          cisco.ios.ios_config:
            lines:
              - no event manager applet UPGRADE
          when: eem_exist 

    # Note that the prompt will change if the running configuration is not saved.  Therefore the EEM script mandates to save the configuration before activating the new firmware.
        - name: Configure the actual EEM script 
          cisco.ios.ios_config:
            lines:
              - event manager applet UPGRADE authorization bypass
              - event none maxrun {{ command_timeout }}
              - action 0001 cli command "enable"
              - action 0002 cli command "term length 0"
              - action 0005 cli command "wr" 
              - action 0010 cli command "install add file {{ device_file }} activate commit" pattern "This operation" 
              - action 0020 cli command "y" 

        - name: Run the EEM script to perform upgrade
          cisco.ios.ios_command:
            commands: "event manager run UPGRADE"
          vars:
            ansible_command_timeout: "{{ command_timeout }}"
      when: in_install_mode

    # Task 6b: Change Boot variable for legacy devices using bundle mode
    - block:
        - name: Capture boot system command to be modified
          cisco.ios.ios_command:
            commands:
              - show run | inc boot system
          register: boot_output

        - name: Configure boot variable to prepare for reboot 
          cisco.ios.ios_config:
            lines:
              - "no {{ boot_output.stdout[0] }}"
              - "boot system {{ device_file }}"
            save_when: always
          register: config_output
      when: not in_install_mode